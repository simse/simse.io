---
// imports
import escapeHTML from 'escape-html';
import { Text, Element } from 'slate';

interface Props {
    children: any;
}

const { children } = Astro.props;

const serialize = (children: unknown[]): string => {
  if (!children) {
    return "";
  }

  return children.map((node: any) => {
    if (Text.isText(node)) {
      let text = escapeHTML(node.text);

      let thisNode = node as any;

      if (thisNode.bold) {
        text = `<strong>${text}</strong>`;
      }

      if (thisNode.code) {
        text = `<code>${text}</code>`;
      }

      if (thisNode.italic) {
        text = `<em>${text}</em>`;
      }

      // Handle other leaf types here...

      return text;
    }

    if (!node) {
      return "";
    }

    switch (node.type) {
      /*case 'h1':
        return (
          <h1 key={i}>
            {serialize(node.children)}
          </h1>
        );
      // Iterate through all headings here...
      case 'h6':
        return (
          <h6 key={i}>
            {serialize(node.children)}
          </h6>
        );
      case 'quote':
        return (
          <blockquote key={i}>
            {serialize(node.children)}
          </blockquote>
        );*/
      case 'ul':
        return (
          `<ul>${serialize(node.children)}</ul>`
        );
      /*case 'ol':
        return (
          <ol key={i}>
            {serialize(node.children)}
          </ol>
        );*/
      case 'li':
        return (
          `<li>${serialize(node.children)}</li>`
        );
      case 'link':
        return (
          `<a href=${escapeHTML(node.url)}>${serialize(node.children)}</a>`
        );

      default:
        return (
        `<p>${serialize(node.children)}</p>`);
    }
  }).join('');

}
---
<Fragment set:html={serialize(children)}></Fragment>

---
// imports
import feather from "feather-icons"
import escapeHTML from "escape-html";
import { Text } from "slate";
import hljs from 'highlight.js';

interface Props {
  children: any;
}

const { children } = Astro.props;

const serialize = (children: unknown[]): string => {
  if (!children) {
    return "";
  }

  return children
    .map((node: any) => {
      if (Text.isText(node)) {
        let text = escapeHTML(node.text);

        let thisNode = node as any;

        if (thisNode.bold) {
          text = `<strong>${text}</strong>`;
        }

        if (thisNode.code) {
          text = `<code>${text}</code>`;
        }

        if (thisNode.italic) {
          text = `<em>${text}</em>`;
        }

        // Handle other leaf types here...

        return text;
      }

      if (!node) {
        return "";
      }

      switch (node.type) {
        case "h1":
          return `<h1>${serialize(node.children)}</h1>`;
        case "h2":
          return `<h2>${serialize(node.children)}</h2>`;
        case "h3":
          return `<h3>${serialize(node.children)}</h3>`;
        case "h4":
          return `<h4>${serialize(node.children)}</h4>`;
        case "h5":
          return `<h5>${serialize(node.children)}</h5>`;
        case "h6":
          return `<h6>${serialize(node.children)}</h6>`;
        case "relationship":
          if (node.relationTo !== "code-snippet") return;

          return `<pre class="text-lg p-0 font-monospace">
            <code class="hljs px-5 py-3">${hljs.highlightAuto(node.value.code).value}</code>
          </pre>`;
        case "ul":
          return `<ul>${serialize(node.children)}</ul>`;
        case "code-block":
          return serialize(node.children);
        /*case 'ol':
        return (
          <ol key={i}>
            {serialize(node.children)}
          </ol>
        );*/
        case "li":
          return `<li>${serialize(node.children)}</li>`;
        case "link":
          return `<a class="text-blue-500 items-center no-underline hover:underline inline-flex -mt-1" href=${escapeHTML(node.url)} target="${node.newTab ? '_blank' : ''}">${feather.icons["external-link"].toSvg({ height: 20 })}<span class="mt-1">${serialize(
            node.children
          )}</span></a>`;
        case "upload":
          const aspectRatio = `${node.value.width} / ${node.value.height}`;

          return `<img src="https://imagedelivery.net/momKfEj2XLFFfTO94YnvIg/${node.value.cloudflareImageId}/format=auto,w=800" class="w-full" style="aspect-ratio:${aspectRatio}" />`
        default:
          return `<p>${serialize(node.children)}</p>`;
      }
    })
    .join("");
};
---

<Fragment set:html={serialize(children)} />

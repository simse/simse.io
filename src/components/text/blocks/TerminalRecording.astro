---
interface Props {
  index: number
  isInline: boolean
  class?: string
  node: {
    _type: 'terminalRecording'
    _key: string
    title: string
    cast_file: {
      _type: 'file'
      asset: {
        _ref: string
        _type: 'reference'
      }
    }
  }
}

const props = Astro.props
---
<script>
  // @ts-expect-error asciinema is untyped
  import * as AsciinemaPlayer from 'asciinema-player';

  const findUnitialisedPlayers = () => {
    const players = document.querySelectorAll('.asciinema:not([player-initialised])');

    players.forEach(async (player) => {
        const fileReferenceAttr = player.attributes.getNamedItem('file-reference');
        const fileReference = fileReferenceAttr ? fileReferenceAttr.value : null;

        if (fileReference) {
          AsciinemaPlayer.create(`/api/file/${fileReference}`, player, {
            idleTimeLimit: 0.5,
            terminalFontFamily: 'SoehneMono, monospace',
            terminalFontSize: 16,
            fit: false,
            preload: true,
            controls: false,
          });

          player.setAttribute('player-initialised', 'true')
        }
    })
  }

  document.addEventListener('astro:page-load', () => {
    findUnitialisedPlayers();
  });
</script>

<div class="col-start-1 col-end-7 rounded overflow-clip overflow-x-auto my-4 select-none">
  <div class="asciinema" title={props.node.title} file-reference={props.node.cast_file.asset._ref}></div>
</div>
---
interface Props {
    text: string;
}

const { text } = Astro.props;

const getDelay = (char: string, position: number): number => {
    const delay = char.charCodeAt(0) * position / 20;

    return delay;
}
---
<style lang="scss">
@keyframes censored {
    0% {
        content: '!';
    }

    19% {
        content: 'Â£';
    }

    32% {
        content: '@';
    }
    
    50% {
        content: '#';
    }

    71% {
        content: '$';
    }

    87% {
        content: '%';
    }
    
    100% {
        content: '!';
    }
}

span.letter:after {
    content: '*';
    animation: censored var(--duration) infinite;
    animation-delay: var(--delay);

    @media (prefers-reduced-motion: reduce) {
        animation-play-state: paused;
    }
}
</style>

<span class="font-mono">
    {[...text].map((letter, i) => {
        return letter === ' ' ? ' ' : <span class="letter" style={`--duration: ${getDelay(letter, i)}s; --delay: -${getDelay(letter, i)}s`}></span>
    })}
</span>
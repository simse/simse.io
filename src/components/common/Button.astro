---
import { Icon } from 'astro-icon/components'

interface Props {
  href: string
  style?: 'primary' | 'secondary' | 'amber'
  icon?: string
  target?: '_blank' | '_self'
  shortcut?: string
  bgColor?: string
  hoverBgColor?: string
  textColor?: string
}

const {
  href,
  icon,
  target = '_blank',
  shortcut,
  bgColor,
  hoverBgColor,
  textColor,
  style = 'primary',
}: Props = Astro.props

const styleToClass = {
  primary: {
    bg: 'bg-blue-600',
    hoverBg: 'hover:bg-blue-700',
    text: 'text-white',
  },
  secondary: {
    bg: 'bg-zinc-800',
    hoverBg: 'hover:bg-zinc-700',
    text: 'text-white',
  },
  amber: {
    bg: 'bg-amber-600',
    hoverBg: 'hover:bg-amber-700',
    text: 'text-black',
  },
}

const bgColorClass = () => {
  if (bgColor) return bgColor
  return styleToClass[style].bg
}

const hoverBgColorClass = () => {
  if (hoverBgColor) return hoverBgColor
  return styleToClass[style].hoverBg
}

const textColorClass = () => {
  if (textColor) return textColor
  return styleToClass[style].text
}
---
<!-- this script is bundled and embedded once per page -->
<script>
  document.addEventListener('astro:page-load', () => {
    const buttons = document.querySelectorAll('a[shortcut-key]') as NodeListOf<HTMLAnchorElement>

    window.addEventListener('keydown', (e) => {
      buttons.forEach((button: HTMLAnchorElement) => {
        if (e.key === button.getAttribute('shortcut-key')) {
          const rect = button.getBoundingClientRect();
          const buffer = 10; // buffer in pixels
          const isVisible = (
            rect.top < (window.innerHeight || document.documentElement.clientHeight) + buffer &&
            rect.left < (window.innerWidth || document.documentElement.clientWidth) + buffer &&
            rect.bottom > -buffer &&
            rect.right > -buffer
          );

          if (isVisible) {
            button.click();
          }
        }
      })
    })
  })
</script>

<a 
  class={`flex items-center gap-2 transition-colors w-fit py-1.5 px-3 rounded ${bgColorClass()} ${hoverBgColorClass()} ${textColorClass()}`} 
  href={href} 
  target={target}
  shortcut-key={shortcut}
  role="button"
>
  {icon ? <Icon name={icon} size={18} /> : null}
  <slot />
  {shortcut ? (
    <code 
      class="border border-black/20 bg-black/10 w-4 h-4 rounded font-bold flex items-center justify-center text-xs"
    >
      {shortcut}
    </code>
  ) : null}
</a>
